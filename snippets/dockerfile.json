{
    "dockerfile-front": {
        "prefix": "dockerfile-front",
        "body": [
            "FROM node as builder\nWORKDIR /app\nCOPY package.json .\nCOPY package-lock.json . \nRUN npm i \nCOPY . .\nARG NODE_ENV\nENV NODE_ENV \\$NODE_ENV\nRUN npm run build\n \nFROM nginx:alpine\nARG NODE_ENV\nENV NODE_ENV \\$NODE_ENV\nRUN echo \\$'\\n\\nserver {      \\n\\n    listen 80;      \\n\\n    server_name _;       \\n\\n    root /usr/share/nginx/html;     \\n\\n    index index.html;       \\n\\n    location / {        \\n\\n        try_files \\$uri \\$1 \\$uri/ /index.html =404;       \\n\\n    }       \\n\\n}' > /etc/nginx/conf.d/default.conf\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
        ],
        "description": "dockerfile-front"
    },
    "dockerfile-nodejs": {
        "prefix": "dockerfile-nodejs",
        "body": [
            "FROM node as builder\n \nRUN mkdir -p /app/\nWORKDIR /app/\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm i\nCOPY . .\nARG NODE_ENV\nENV NODE_ENV \\$NODE_ENV\nRUN npm run build\n \nFROM node:alpine\nARG NODE_ENV\nENV NODE_ENV \\$NODE_ENV\nRUN mkdir -p /app/\nWORKDIR /app/\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/node_modules ./node_modules\nCMD [ \"node\", \"./dist/main.js\"]\n"
        ],
        "description": "dockerfile-nodejs"
    },
    "dockerfile-dotnetcore": {
        "prefix": "dockerfile-dotnetcore",
        "body": [
            "FROM microsoft/dotnet:2.2-sdk AS build\nWORKDIR /src\nCOPY . .\nRUN dotnet restore\nRUN dotnet build -c Release \nRUN dotnet test\nRUN dotnet publish -c Release -o publish\n \nFROM microsoft/dotnet:2.2-aspnetcore-runtime\nWORKDIR /publish\nARG ASPNETCORE_ENVIRONMENT\nENV ASPNETCORE_ENVIRONMENT \\$ASPNETCORE_ENVIRONMENT\nCOPY --from=build /src/$PROJECT_NAME_REPLACE/publish .\nENTRYPOINT [\"dotnet\", \"$PROJECT_NAME_REPLACE.dll\"]\n \n \n\n"
        ],
        "description": "dockerfile-dotnetcore"
    }
}
